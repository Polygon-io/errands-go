// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package errands

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	schemas "github.com/polygon-io/errands-server/schemas"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson50e08061DecodeGithubComPolygonIoErrandsGo(in *jlexer.Lexer, out *FailErrandReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			out.Reason = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson50e08061EncodeGithubComPolygonIoErrandsGo(out *jwriter.Writer, in FailErrandReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reason\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reason))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FailErrandReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FailErrandReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FailErrandReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FailErrandReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo(l, v)
}
func easyjson50e08061DecodeGithubComPolygonIoErrandsGo1(in *jlexer.Lexer, out *ErrandsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]schemas.Errand, 0, 1)
					} else {
						out.Results = []schemas.Errand{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v1 schemas.Errand
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Results = append(out.Results, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson50e08061EncodeGithubComPolygonIoErrandsGo1(out *jwriter.Writer, in ErrandsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Results {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrandsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrandsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrandsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrandsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo1(l, v)
}
func easyjson50e08061DecodeGithubComPolygonIoErrandsGo2(in *jlexer.Lexer, out *ErrandResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Results).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson50e08061EncodeGithubComPolygonIoErrandsGo2(out *jwriter.Writer, in ErrandResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Results).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrandResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrandResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrandResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrandResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo2(l, v)
}
func easyjson50e08061DecodeGithubComPolygonIoErrandsGo3(in *jlexer.Lexer, out *CompleteErrandReq) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "results":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Results = make(map[string]interface{})
				} else {
					out.Results = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Results)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson50e08061EncodeGithubComPolygonIoErrandsGo3(out *jwriter.Writer, in CompleteErrandReq) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Results == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Results {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CompleteErrandReq) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CompleteErrandReq) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson50e08061EncodeGithubComPolygonIoErrandsGo3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CompleteErrandReq) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CompleteErrandReq) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson50e08061DecodeGithubComPolygonIoErrandsGo3(l, v)
}
